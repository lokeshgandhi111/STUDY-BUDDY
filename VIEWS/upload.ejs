<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>StudyBuddy - Upload</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  <style>
    :root {
      --primary-color: #4e73df;
      --secondary-color: #f8f9fc;
      --accent-color: #2e59d9;
    }
    
    .upload-card {
      transition: all 0.3s ease;
      cursor: pointer;
      height: 100%;
      border: none;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    
    .upload-card:hover {
      transform: translateY(-5px) scale(1.02);
      box-shadow: 0 10px 20px rgba(0,0,0,0.15);
    }
    
    .file-preview {
      height: 180px;
      background: var(--secondary-color);
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      overflow: hidden;
    }
    
    .pdf-icon {
      color: #e74a3b;
      font-size: 4rem;
      opacity: 0.8;
    }
    
    .text-icon {
      color: #36b9cc;
      font-size: 4rem;
      opacity: 0.8;
    }
    
    .img-preview {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.5s ease;
    }
    
    .upload-card:hover .img-preview {
      transform: scale(1.1);
    }
    
    .text-preview {
      padding: 15px;
      max-height: 180px;
      overflow: hidden;
      text-overflow: ellipsis;
      display: -webkit-box;
      -webkit-line-clamp: 5;
      -webkit-box-orient: vertical;
      background: white;
    }
    
    .card-body {
      padding: 1.25rem;
      background: white;
    }
    
    .card-title {
      font-weight: 600;
      color: var(--primary-color);
      margin-bottom: 0.5rem;
    }
    
    .card-text {
      color: #6c757d;
      font-size: 0.9rem;
    }
    
    .upload-date {
      font-size: 0.8rem;
      color: #adb5bd;
    }
    
    .action-buttons {
      margin-top: 1rem;
      display: flex;
      gap: 0.5rem;
    }
    
    .btn-view {
      background: var(--primary-color);
      color: white;
      border: none;
    }
    
    .btn-view:hover {
      background: var(--accent-color);
    }
    
    .empty-state {
      text-align: center;
      padding: 3rem;
      background: var(--secondary-color);
      border-radius: 10px;
      margin-top: 2rem;
    }
    
    .empty-icon {
      font-size: 5rem;
      color: #dddfeb;
      margin-bottom: 1rem;
    }
    
    .upload-btn {
      background: var(--primary-color);
      border: none;
      padding: 0.5rem 1.5rem;
      font-weight: 600;
      transition: all 0.3s;
    }
    
    .upload-btn:hover {
      background: var(--accent-color);
      transform: translateY(-2px);
    }
    
    .file-badge {
      position: absolute;
      top: 10px;
      right: 10px;
      background: rgba(0,0,0,0.7);
      color: white;
      padding: 0.25rem 0.5rem;
      border-radius: 20px;
      font-size: 0.7rem;
      font-weight: 600;
    }
    
    .filter-controls {
      background: white;
      padding: 1rem;
      border-radius: 10px;
      margin-bottom: 2rem;
      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }
  </style>
</head>
<body class="bg-light">
  <div class="container py-5">
    <!-- Upload Modal -->
    <div class="modal fade" id="uploadModal" tabindex="-1">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header bg-primary text-white">
            <h5 class="modal-title"><i class="fas fa-cloud-upload-alt me-2"></i> Upload New File</h5>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
          </div>
          <form id="uploadForm" enctype="multipart/form-data">
            <div class="modal-body">
              <div class="mb-3">
                <label class="form-label">Title*</label>
                <input type="text" name="title" class="form-control" required 
                       placeholder="Give your file a descriptive title" minlength="3" maxlength="100">
              </div>
              <div class="mb-3">
                <label class="form-label">Description</label>
                <textarea name="description" class="form-control" rows="3" 
                          placeholder="Optional description about this file" maxlength="500"></textarea>
              </div>
              <div class="mb-3">
                <label class="form-label">Subject/Category</label>
                <input type="text" name="subject" class="form-control" 
                       placeholder="e.g. Mathematics, Physics" maxlength="50">
              </div>
              <div class="mb-3">
                <label class="form-label">File* (PDF/Image/Text)</label>
                <div class="file-upload-wrapper">
                  <input type="file" name="file" id="fileInput" class="form-control" 
                         accept=".pdf,.jpg,.jpeg,.png,.txt" required>
                  <small class="text-muted">Max file size: 10MB. Supported formats: PDF, JPG, PNG, TXT</small>
                  <div id="fileError" class="invalid-feedback"></div>
                </div>
              </div>
              <div class="progress mb-3 d-none" id="uploadProgress">
                <div class="progress-bar progress-bar-striped progress-bar-animated" 
                     role="progressbar" style="width: 0%"></div>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="submit" class="btn btn-primary" id="submitBtn">
                <i class="fas fa-upload me-1"></i> Upload
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- View Modal -->
    <div class="modal fade" id="viewModal" tabindex="-1">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header bg-primary text-white">
            <h5 class="modal-title" id="viewModalTitle"></h5>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body" id="viewModalContent">
            <!-- Content will be loaded dynamically -->
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <a href="#" class="btn btn-primary" id="downloadBtn" download>
              <i class="fas fa-download me-1"></i> Download
            </a>
          </div>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h1 class="text-primary">
        <i class="fas fa-folder-open me-2"></i> My Uploads
      </h1>
      <button class="btn btn-primary upload-btn animate__animated animate__pulse" data-bs-toggle="modal" data-bs-target="#uploadModal">
        <i class="fas fa-plus me-2"></i> New Upload
      </button>
    </div>

    <!-- Filter Controls -->
    <div class="filter-controls animate__animated animate__fadeIn">
      <div class="row">
        <div class="col-md-6">
          <div class="input-group mb-3">
            <span class="input-group-text"><i class="fas fa-search"></i></span>
            <input type="text" class="form-control" placeholder="Search uploads..." id="searchInput">
          </div>
        </div>
        <div class="col-md-6">
          <div class="input-group mb-3">
            <span class="input-group-text"><i class="fas fa-filter"></i></span>
            <select class="form-select" id="subjectFilter">
              <option value="all">All Subjects</option>
              <% subjects.forEach(subject => { %>
                <option value="<%= subject %>" <%= currentFilter === subject ? 'selected' : '' %>><%= subject %></option>
              <% }); %>
            </select>
          </div>
        </div>
      </div>
    </div>

    <!-- Uploads Grid -->
    <div class="row g-4" id="uploadContainer">
      <% if (upload.length === 0) { %>
        <div class="col-12">
          <div class="empty-state animate__animated animate__fadeIn">
            <div class="empty-icon">
              <i class="fas fa-cloud-upload-alt"></i>
            </div>
            <h4 class="text-muted">No Uploads Yet</h4>
            <p class="text-muted">Get started by uploading your first file</p>
            <button class="btn btn-primary upload-btn" data-bs-toggle="modal" data-bs-target="#uploadModal">
              <i class="fas fa-plus me-2"></i> Upload Now
            </button>
          </div>
        </div>
      <% } else { %>
        <% upload.forEach(item => { %>
          <div class="col-md-4 col-lg-3 animate__animated animate__fadeInUp" id="upload-<%= item._id %>">
            <div class="card upload-card h-100">
              <div class="file-preview">
                <% if(item.fileType === 'pdf') { %>
                  <i class="fas fa-file-pdf pdf-icon"></i>
                <% } else if(item.fileType === 'image') { %>
                  <img src="/upload/<%= item.filename %>" class="img-preview">
                <% } else { %>
                  <i class="fas fa-file-alt text-icon"></i>
                <% } %>
                <span class="file-badge"><%= item.fileType.toUpperCase() %></span>
              </div>
              <div class="card-body">
                <h5 class="card-title text-truncate"><%= item.title %></h5>
                <% if(item.description) { %>
                  <p class="card-text text-muted text-truncate"><%= item.description %></p>
                <% } %>
                <% if(item.subject) { %>
                  <span class="badge bg-primary mb-2"><%= item.subject %></span>
                <% } %>
                <div class="d-flex justify-content-between align-items-center">
                  <small class="upload-date">
                    <i class="far fa-calendar-alt me-1"></i>
                    <%= formatDate(item.createdAt) %>
                  </small>
                  <div class="action-buttons">
                    <button class="btn btn-sm btn-outline-primary view-btn" data-id="<%= item._id %>">
                      <i class="fas fa-eye"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-danger delete-btn" data-id="<%= item._id %>">
                      <i class="fas fa-trash"></i>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        <% }); %>
      <% } %>
    </div>

    <!-- Pagination -->
    <% if (upload.length > 0) { %>
      <nav class="mt-4">
        <ul class="pagination justify-content-center">
          <% if (pagination.hasPreviousPage) { %>
            <li class="page-item">
              <a class="page-link" href="?page=<%= pagination.previousPage %>&subject=<%= currentFilter %>">
                <i class="fas fa-chevron-left"></i>
              </a>
            </li>
          <% } else { %>
            <li class="page-item disabled">
              <span class="page-link"><i class="fas fa-chevron-left"></i></span>
            </li>
          <% } %>
          
          <% for (let i = 1; i <= pagination.totalPages; i++) { %>
            <li class="page-item <%= i === pagination.currentPage ? 'active' : '' %>">
              <a class="page-link" href="?page=<%= i %>&subject=<%= currentFilter %>"><%= i %></a>
            </li>
          <% } %>
          
          <% if (pagination.hasNextPage) { %>
            <li class="page-item">
              <a class="page-link" href="?page=<%= pagination.nextPage %>&subject=<%= currentFilter %>">
                <i class="fas fa-chevron-right"></i>
              </a>
            </li>
          <% } else { %>
            <li class="page-item disabled">
              <span class="page-link"><i class="fas fa-chevron-right"></i></span>
            </li>
          <% } %>
        </ul>
      </nav>
    <% } %>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Handle file upload with progress
    document.getElementById('uploadForm').addEventListener('submit', function(e) {
      e.preventDefault();
      const formData = new FormData(this);
      const submitBtn = this.querySelector('button[type="submit"]');
      const progressBar = document.getElementById('uploadProgress');
      
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Uploading...';
      progressBar.classList.remove('d-none');
      
      const xhr = new XMLHttpRequest();
      xhr.open('POST', '/upload/upload', true);
      
      xhr.upload.onprogress = function(e) {
        if (e.lengthComputable) {
          const percentComplete = Math.round((e.loaded / e.total) * 100);
          progressBar.querySelector('.progress-bar').style.width = percentComplete + '%';
          progressBar.querySelector('.progress-bar').setAttribute('aria-valuenow', percentComplete);
        }
      };
      
      xhr.onload = function() {
        if (xhr.status === 200) {
          const response = JSON.parse(xhr.responseText);
          if (response.success) {
            // Show success animation before reload
            const modal = bootstrap.Modal.getInstance(document.getElementById('uploadModal'));
            modal.hide();
            
            // Create and show success toast
            const toastHTML = `
              <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
                <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                  <div class="toast-header bg-success text-white">
                    <strong class="me-auto">Success</strong>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
                  </div>
                  <div class="toast-body">
                    File uploaded successfully!
                  </div>
                </div>
              </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', toastHTML);
            
            // Remove toast after 3 seconds and reload
            setTimeout(() => {
              document.querySelector('.toast').remove();
              window.location.reload();
            }, 3000);
          } else {
            showError(response.error || 'Upload failed');
          }
        } else {
          showError('Upload failed. Please try again.');
        }
      };
      
      xhr.onerror = function() {
        showError('Network error occurred. Please try again.');
      };
      
      xhr.send(formData);
      
      function showError(message) {
        const errorToastHTML = `
          <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
              <div class="toast-header bg-danger text-white">
                <strong class="me-auto">Error</strong>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
              </div>
              <div class="toast-body">
                ${message}
              </div>
            </div>
          </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', errorToastHTML);
        submitBtn.disabled = false;
        submitBtn.innerHTML = '<i class="fas fa-upload me-1"></i> Upload';
        progressBar.classList.add('d-none');
      }
    });

    // Handle view button clicks
    document.querySelectorAll('.view-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        const uploadId = this.getAttribute('data-id');
        
        fetch(`/upload/${uploadId}`)
          .then(res => res.json())
          .then(data => {
            if (data.error) {
              throw new Error(data.error);
            }
            
            const viewModal = new bootstrap.Modal(document.getElementById('viewModal'));
            const modalTitle = document.getElementById('viewModalTitle');
            const modalContent = document.getElementById('viewModalContent');
            const downloadBtn = document.getElementById('downloadBtn');
            
            modalTitle.textContent = data.title;
            downloadBtn.href = `/upload/${data.filename}`;
            
            if (data.fileType === 'pdf') {
              modalContent.innerHTML = `
                <div class="text-center py-4">
                  <i class="fas fa-file-pdf fa-5x text-danger mb-3"></i>
                  <p>PDF file preview not available. Download to view.</p>
                </div>
              `;
            } else if (data.fileType === 'image') {
              modalContent.innerHTML = `
                <div class="text-center">
                  <img src="/upload/${data.filename}" class="img-fluid" alt="${data.title}">
                </div>
              `;
            } else {
              modalContent.innerHTML = `
                <div class="mb-3">
                  <h6>Description:</h6>
                  <p>${data.description || 'No description provided'}</p>
                </div>
                <div>
                  <h6>Content:</h6>
                  <div class="text-content-full bg-light p-3 rounded">
                    <pre>${data.content || 'No text content available'}</pre>
                  </div>
                </div>
              `;
            }
            
            viewModal.show();
          })
          .catch(err => {
            console.error('Error:', err);
            alert('Failed to load upload: ' + err.message);
          });
      });
    });

    // Handle delete button clicks
    document.querySelectorAll('.delete-btn').forEach(btn => {
      btn.addEventListener('click', function(e) {
        e.stopPropagation();
        const uploadId = this.getAttribute('data-id');
        const uploadCard = document.getElementById(`upload-${uploadId}`);
        
        if (confirm('Are you sure you want to delete this upload? This action cannot be undone.')) {
          // Add deleting animation
          uploadCard.classList.add('animate__animated', 'animate__fadeOut');
          
          fetch(`/upload/${uploadId}`, { 
            method: 'DELETE' 
          })
          .then(res => res.json())
          .then(data => {
            if (data.success) {
              // Wait for animation to complete before removing
              setTimeout(() => {
                uploadCard.remove();
                
                // Show success toast
                const toastHTML = `
                  <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
                    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                      <div class="toast-header bg-success text-white">
                        <strong class="me-auto">Success</strong>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
                      </div>
                      <div class="toast-body">
                        Upload deleted successfully!
                      </div>
                    </div>
                  </div>
                `;
                
                document.body.insertAdjacentHTML('beforeend', toastHTML);
                
                // Remove toast after 3 seconds
                setTimeout(() => {
                  document.querySelector('.toast').remove();
                }, 3000);
              }, 500);
            } else {
              throw new Error(data.error || 'Delete failed');
            }
          })
          .catch(err => {
            console.error('Error:', err);
            uploadCard.classList.remove('animate__animated', 'animate__fadeOut');
            alert('Delete failed: ' + err.message);
          });
        }
      });
    });

    // Filter functionality
    document.getElementById('subjectFilter').addEventListener('change', function() {
      const subject = this.value;
      window.location.href = `?subject=${subject}`;
    });

    // Search functionality
    document.getElementById('searchInput').addEventListener('input', function() {
      const searchTerm = this.value.toLowerCase();
      const cards = document.querySelectorAll('.upload-card');
      
      cards.forEach(card => {
        const title = card.querySelector('.card-title').textContent.toLowerCase();
        const description = card.querySelector('.card-text')?.textContent.toLowerCase() || '';
        
        if (title.includes(searchTerm) || description.includes(searchTerm)) {
          card.closest('.col-md-4').style.display = 'block';
        } else {
          card.closest('.col-md-4').style.display = 'none';
        }
      });
    });
  </script>
</body>
</html>